<?php
/**
 * @file
 *   Allow the hosting system to cron all the sites with CiviCRM installed on a schedule.
 */

/**
 * Implementation of hook_hosting_queues().
 */
function hosting_civicrm_cron_hosting_queues() {
  $items['civicrm_cron'] = array(
    'type' => 'batch',
    'name' => t('CiviCRM cron queue'),
    'description' => t('Run cron on hosted CiviCRM sites.'),
    'total_items' => hosting_civicrm_cron_site_count(),
    'frequency' => strtotime("1 hour", 0),
    'min_threads' => 6,
    'max_threads' => 12,
    'threshold' => 100,
    'singular' => t('CiviCRM site'),
    'plural' => t('CiviCRM sites'),
  );
  return $items;
}

/**
 * Implementation of hosting_QUEUE_TYPE_queue().
 */
function hosting_civicrm_cron_queue($count) {
  $sites = hosting_civicrm_cron_get_sites('last_civicrm_cron');
  foreach ($sites as $nid) {
    $site = node_load($nid);
    $site_name = hosting_context_name($site->nid);
    $url =_hosting_site_url($site) . '/index.php';

    // Issue #1613484
    // read http://wiki.civicrm.org/confluence/display/CRMDOC41/Managing+Scheduled+Jobs
    // only run the cron on CiviCRM >= 4.1. Normally civicrm.drush.inc will test for 4.1
    // and quietly exit otherwise (so we do not need to check here).
    drush_log(dt("Running CiviCRM cron on URL %url", array('%url' => $url)));
    $result = provision_backend_invoke($site_name, "civicrm-api", array('--user=1', 'Job.execute', 'auth=0'));

    if (! empty($result['error_status'])) {
      watchdog('hosting_civicrm_cron', t('ERROR: !error', array('!error' => $result['output'])));
    }
    else {
      watchdog('hosting_civicrm_cron', t('CiviCRM cron run was sucessful.'));
    }

    // We are updating the site table here directly to avoid a possible race condition,
    // with the task queue. There exists a chance that they might both try to save the
    // same node at the same time, and then an old record from the cron queue might
    // replace the newly updated record.
    db_query("UPDATE {hosting_site} SET last_civicrm_cron=%d WHERE nid=%d", mktime(), $nid);
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function hosting_civicrm_cron_nodeapi(&$node, $op, $a3 = null) {
  if ($node->type == 'site') {
    if (in_array($node->platform, hosting_civicrm_cron_get_platforms())) {
      switch ($op) {
        case 'load':
          $node->last_civicrm_cron = _last_civicrm_cron($node->nid);
          break;
        case 'view':
          if (!$a3) {
            $node->content['info']['last_civicrm_cron'] = array(
              '#type' => 'item',
              '#title' => t('CiviCRM cron run'),
              '#weight' => 20,
              '#value' => hosting_format_interval($node->last_civicrm_cron),
            );
          }
          break;
      }
    }
  }
}

/**
 * Return the last CiviCRM cron for a site
 */
function _last_civicrm_cron($nid) {
  return db_result(db_query('SELECT last_civicrm_cron FROM {hosting_site} WHERE nid = %d', $nid));
}


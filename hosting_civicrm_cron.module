<?php
/**
 * @file
 *   Allow the hosting system to cron all the sites with CiviCRM installed on a schedule.
 */

/**
 * Implementation of hook_hosting_queues().
 */
function hosting_civicrm_cron_hosting_queues() {
  $items['civicrm_cron'] = array(
    'type' => 'batch',
    'name' => t('CiviCRM cron queue'),
    'description' => t('Run cron on hosted CiviCRM sites.'),
    'total_items' => hosting_civicrm_cron_site_count(),
    'frequency' => strtotime("1 hour", 0),
    'min_threads' => 6,
    'max_threads' => 12,
    'threshold' => 100,
    'singular' => t('CiviCRM site'),
    'plural' => t('CiviCRM sites'),
  );
  return $items;
}

/**
 * Implementation of hosting_QUEUE_TYPE_queue().
 */
function hosting_civicrm_cron_queue($count) {
  $sites = hosting_civicrm_cron_get_sites('last_civicrm_cron');
  foreach ($sites as $nid) {
    $site = node_load($nid);
    $site_name = hosting_context_name($site->nid);
    $url =_hosting_site_url($site) . '/index.php';

    // Issue #1613484
    // read http://wiki.civicrm.org/confluence/display/CRMDOC41/Managing+Scheduled+Jobs
    // only run the cron on CiviCRM >= 4.1. Normally civicrm.drush.inc will test for 4.1
    // and quietly exit otherwise (so we do not need to check here).
    drush_log(dt("Running CiviCRM cron on URL %url", array('%url' => $url)));
    $result = provision_backend_invoke($site_name, "civicrm-api", array('--user=1', 'Job.execute', 'auth=0'));

    if (! empty($result['error_status'])) {
      watchdog('hosting_civicrm_cron', t('ERROR: !error', array('!error' => $result['output'])));
    }
    else {
      watchdog('hosting_civicrm_cron', t('CiviCRM cron run was sucessful.'));
    }

    // We are updating the site table here directly to avoid a possible race condition,
    // with the task queue. There exists a chance that they might both try to save the
    // same node at the same time, and then an old record from the cron queue might
    // replace the newly updated record.
    db_query("UPDATE {hosting_site} SET last_civicrm_cron=%d WHERE nid=%d", mktime(), $nid);
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function hosting_civicrm_cron_nodeapi(&$node, $op, $a3 = null) {
  if ($node->type == 'site') {
    if (in_array($node->platform, hosting_civicrm_cron_get_platforms())) {
      switch ($op) {
        case 'load':
          $node->last_civicrm_cron = _last_civicrm_cron($node->nid);
          break;
        case 'view':
          if (!$a3) {
            $node->content['info']['last_civicrm_cron'] = array(
              '#type' => 'item',
              '#title' => t('CiviCRM cron run'),
              '#weight' => 20,
              '#value' => hosting_format_interval($node->last_civicrm_cron),
            );
          }
          break;
      }
    }
  }
}

/**
 * Return the last CiviCRM cron for a site
 */
function _last_civicrm_cron($nid) {
  return db_result(db_query('SELECT last_civicrm_cron FROM {hosting_site} WHERE nid = %d', $nid));
}

/**
 * Return the number of sites where CiviCRM is available
 */
function hosting_civicrm_cron_site_count() {
  $platforms = hosting_civicrm_cron_get_platforms();

  $count = 0;
  foreach ($platforms as $key => $nid) {
    $count += hosting_site_count($nid);
  }

  return $count;
}

/**
 * Return an array of platforms that contain CiviCRM
 */
function hosting_civicrm_cron_get_platforms() {
  //TODO: cache the result
  $package_id = db_result(db_query('SELECT nid FROM {hosting_package} WHERE short_name = "%s"', 'civicrm'));
  $result = db_query('SELECT nid FROM {hosting_platform} pl JOIN {hosting_package_instance} pkg ON pl.nid=pkg.rid WHERE pkg.package_id=%d', $package_id);

  $platforms = array();
  while ($nid = db_result($result)) {
    $platforms[] = $nid;
  }
  return $platforms;
}

/**
 * Return an array of enabled sites capable of running CiviCRM
 *
 * @param $order_by
 *   Field to order the returned sites by.
 */
function hosting_civicrm_cron_get_sites($order_by = null) {
  $platforms = hosting_civicrm_cron_get_platforms();
  $sites = array();

  foreach ($platforms as $platform) {
    //get all the enabled sites on the platform
    if (isset($order_by)) {
      $result = db_query('SELECT n.nid FROM {node} n LEFT JOIN {hosting_site} s ON n.nid=s.nid WHERE n.type="site" and s.status = %d and s.platform = %d ORDER BY "%s" ASC', HOSTING_SITE_ENABLED, $platform, $order_by);
    }
    else {
      $result = db_query('SELECT n.nid FROM {node} n LEFT JOIN {hosting_site} s ON n.nid=s.nid WHERE n.type="site" and s.status = %d and s.platform=%d', HOSTING_SITE_ENABLED, $platform);
    }
    while ($nid = db_fetch_object($result)->nid) {
      $sites[] = $nid;
    }
  }

  return $sites;
}

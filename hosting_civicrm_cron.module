<?php
/**
 * @file
 *   Allow the hosting system to cron all the sites with CiviCRM installed on a schedule.
 */

/**
 * Implementation of hook_hosting_queues().
 */
function hosting_civicrm_cron_hosting_queues() {
  $items['civicrm_cron'] = array(
    'type' => 'batch',
    'name' => t('CiviCRM cron queue'),
    'description' => t('Run cron on hosted CiviCRM sites.'),
    'total_items' => hosting_civicrm_cron_site_count(),
    'frequency' => strtotime("1 hour", 0),
    'min_threads' => 6,
    'max_threads' => 12,
    'threshold' => 100,
    'singular' => t('CiviCRM site'),
    'plural' => t('CiviCRM sites'),
  );
  return $items;
}

/**
 * Implementation of hosting_QUEUE_TYPE_queue().
 */
function hosting_civicrm_cron_queue($count) {
  $result = db_query_range("SELECT n.nid FROM {node} n LEFT JOIN {hosting_site} s ON n.nid=s.nid WHERE n.type='site' and s.status = %d ORDER BY s.civicrm_last_cron ASC, n.nid ASC", HOSTING_SITE_ENABLED, 0, hosting_civicrm_cron_site_count());
  $i = 0;
  while ($i < $count && $nid = db_fetch_object($result)->nid) {
    $site = node_load($nid);
    $site_name = hosting_context_name($site->nid);
    $url =_hosting_site_url($site) . '/index.php';

    drush_log(dt("running CiviCRM cron on URL %url", array('%url' => $url)));
    $response = drupal_http_request($url, array(), 'GET', '?q=civicrm/mailing/queue&reset=1');
    if (isset($response->error) && $response->error) {
      watchdog('hosting_civicrm_cron', 'CiviCRM cron failed on site %site with error %error', array('%site' => $site->title, '%error' => $response->error), WATCHDOG_NOTICE);
      continue; // don't update the timestamp
    }

    // We are updating the site table here directly to avoid a possible race condition,
    // with the task queue. There exists a chance that they might both try to save the
    // same node at the same time, and then an old record from the cron queue might
    // replace the newly updated record.
    db_query("UPDATE {hosting_site} SET last_civicrm_cron=%d WHERE nid=%d", mktime(), $nid);
    $i++;
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function hosting_civicrm_cron_nodeapi(&$node, $op, $a3 = null) {
  if ($node->type == 'site') {
    if (in_array($node->platform, hosting_civicrm_cron_get_platforms())) {
      switch ($op) {
        case 'view':
          if (!$a3) {
            $node->content['info']['last_civicrm_cron'] = array(
              '#type' => 'item',
              '#title' => t('CiviCRM cron run'),
              '#weight' => 20,
              '#value' => hosting_format_interval(_last_civicrm_cron($node->nid)),
            );
          }
          break;
      }
    }
  }
}

function _last_civicrm_cron($nid) {
  return db_result(db_query('SELECT last_civicrm_cron FROM {hosting_site} WHERE nid = %d', $nid));
}

function hosting_civicrm_cron_site_count() {
  $platforms = hosting_civicrm_cron_get_platforms();

  $count = 0;
  foreach ($platforms as $key => $nid) {
    $count += hosting_site_count($nid);
  }
 
  return $count;
}

function hosting_civicrm_cron_get_platforms() {
  //TODO: cache the result
  $nid = db_result(db_query("SELECT nid FROM {hosting_package} WHERE short_name='civicrm'"));
  $result = db_query('SELECT nid FROM {hosting_platform} pl JOIN {hosting_package_instance} pkg ON pl.nid=pkg.rid WHERE pkg.package_id=%d', $nid); 
  
  $platforms = array();
  while ($nid = db_result($result)) {
    $platforms[] = $nid;
  }
  return $platforms;
}

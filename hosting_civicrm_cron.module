<?php
/**
 * @file
 *   Allow the hosting system to cron all the sites with CiviCRM installed on a schedule.
 */

/**
 * Implementation of hook_hosting_queues().
 */
function hosting_civicrm_cron_hosting_queues() {
  $items['cron'] = array(
    'type' => 'batch',
    'name' => t('CiviCRM cron queue'),
    'description' => t('Run cron on hosted CiviCRM sites.'),
### TODO: We'll probably need a hosting_civicrm_cron_site_count()
    'total_items' => hosting_site_count(),
    'frequency' => strtotime("1 hour", 0),
    'min_threads' => 6,
    'max_threads' => 12,
    'threshold' => 100,
    'singular' => t('CiviCRM site'),
    'plural' => t('CiviCRM sites'),
  );
  return $items;
}

/**
 * Implementation of hosting_QUEUE_TYPE_queue().
 */
function hosting_civicrm_cron_queue($count) {

### TODO: We'll need to select all the Civi sites only
  $result = db_query("SELECT n.nid FROM {node} n LEFT JOIN {hosting_site} s ON n.nid=s.nid WHERE n.type='site' and s.status = %d ORDER BY s.last_cron ASC, n.nid ASC", HOSTING_SITE_ENABLED);

  $i = 0;
  while ($i < $count && $nid = db_fetch_object($result)) {
    $site = node_load($nid->nid);
    $site_name = hosting_context_name($site->nid);

### TODO: Drush Cron probably won't work, so we should probably just remove this
    if (variable_get('hosting_civicrm_cron_use_backend', TRUE)) {
      provision_backend_invoke($site_name, "cron");
    }
    else {
### TODO: rewrite this to use the proper url for CiviCRM
      // Optionally add the cron_key querystring key if the site has one.
      $url =_hosting_site_url($site) . '/cron.php';
      if (!empty($site->cron_key)) {
        $url .= '?cron_key=' . rawurlencode($site->cron_key);
      }
      drush_log(dt("running CiviCRM cron on URL %url", array('%url' => $url)));
      $response = drupal_http_request($url);
      if (isset($response->error) && $response->error) {
        watchdog('hosting_civicrm_cron', 'CiviCRM cron failed on site %site with error %error', array('%site' => $site->title, '%error' => $response->error), WATCHDOG_NOTICE);
        continue; // don't update the timestamp
      }
    }

    // We are updating the site table here directly to avoid a possible race condition,
    // with the task queue. There exists a chance that they might both try to save the
    // same node at the same time, and then an old record from the cron queue might
    // replace the newly updated record.
## This isn't regular cron so we'll need a new field in hosting_site to track it
    db_query("UPDATE {hosting_site} SET last_cron=%d WHERE nid=%d", mktime(), $site->nid);
    $i++;
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function hosting_civicrm_cron_nodeapi(&$node, $op, $a3 = null) {
### This should only select for CiviCRM sites (platforms?)
  if ($node->type == 'site') {
    switch ($op) {
      case 'view':
        if (!$a3) {
          // @todo : turn it into x minutes ago
### again a new field last_civicrm_cron
          $node->content['info']['last_cron'] = array(
            '#type' => 'item',
            '#title' => t('CiviCRM cron run'),
            '#weight' => 20,
            '#value' => hosting_format_interval($node->last_cron)
          );
        }
        break;
    }
  }
}
